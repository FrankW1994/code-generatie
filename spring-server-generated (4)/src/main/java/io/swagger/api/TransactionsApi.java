/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import org.threeten.bp.LocalDate;
import io.swagger.model.Transaction;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-05-18T09:28:40.437Z[GMT]")
@Api(value = "transactions", description = "the transactions API")
public interface TransactionsApi {

    @ApiOperation(value = "Getting a transaction", nickname = "getTransaction", notes = "", response = Transaction.class, authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "transactions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Succesful request.", response = Transaction.class),
        @ApiResponse(code = 400, message = "Bad request. transaction ID must be an integer and larger than 0."),
        @ApiResponse(code = 401, message = "Authorization information is missing or invalid."),
        @ApiResponse(code = 404, message = "A transaction with the specified ID was not found."),
        @ApiResponse(code = 500, message = "Unexpected error.") })
    @RequestMapping(value = "/transactions/{transactionId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Transaction> getTransaction(@Min(0L)@ApiParam(value = "",required=true, allowableValues="") @PathVariable("transactionId") String transactionId
);


    @ApiOperation(value = "Getting a transaction by seach", nickname = "searchTansaction", notes = "", response = Transaction.class, responseContainer = "List", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "transactions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Succesful request.", response = Transaction.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authorization information is missing or invalid."),
        @ApiResponse(code = 404, message = "An account with the specified IBAN was not found."),
        @ApiResponse(code = 500, message = "Unexpected error.") })
    @RequestMapping(value = "/transactions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Transaction>> searchTansaction(@ApiParam(value = "") @Valid @RequestParam(value = "username", required = false) String username
,@ApiParam(value = "") @Valid @RequestParam(value = "userId", required = false) String userId
,@ApiParam(value = "") @Valid @RequestParam(value = "IBAN", required = false) String IBAN
,@ApiParam(value = "") @Valid @RequestParam(value = "transactionSearchDateStart", required = false) LocalDate transactionSearchDateStart
,@ApiParam(value = "") @Valid @RequestParam(value = "transactionSearchDateEnd", required = false) LocalDate transactionSearchDateEnd
,@ApiParam(value = "") @Valid @RequestParam(value = "transactionAmount", required = false) Double transactionAmount
,@ApiParam(value = "") @Valid @RequestParam(value = "MaxNumberOfResults", required = false) Long maxNumberOfResults
);


    @ApiOperation(value = "transfering funds from one account to an other", nickname = "transferFunds", notes = "", response = Long.class, authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "transactions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Funds transfered", response = Long.class),
        @ApiResponse(code = 500, message = "Unexpected error.") })
    @RequestMapping(value = "/transactions",
        produces = { "text/plain" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Long> transferFunds(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Transaction body
);

}
