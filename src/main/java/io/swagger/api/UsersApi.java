/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.*;
import io.swagger.model.Transaction;
import io.swagger.model.User;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.threeten.bp.LocalDate;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-05-18T09:28:40.437Z[GMT]")
@Api(value = "users", description = "the users API")
public interface UsersApi {

    @ApiOperation(value = "Add a new user", nickname = "addUser", notes = "", response = User.class, authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "A user was created succesfully.", response = User.class),
        @ApiResponse(code = 401, message = "Unauthorized action.") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<User> addUser(@ApiParam(value = "created users" ,required=true )  @Valid @RequestBody User body
);


    @ApiOperation(value = "Delete user", nickname = "deleteUser", notes = "Deletes a user, only the current user or an employee can delete a user.", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid userId supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/users/{userId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@ApiParam(value = "The userId that needs to be deleted",required=true) @PathVariable("userId") String userId
);


    @ApiOperation(value = "Find a specific user by id", nickname = "getUserById", notes = "Returns a specific user based on the userId", response = User.class, responseContainer = "Object", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid userId supplied"),
        @ApiResponse(code = 404, message = "User not Found") })
    @RequestMapping(value = "/users/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> getUserById(@ApiParam(value = "Id of the user to return",required=true) @PathVariable("userId") Long userId
);


    @ApiOperation(value = "returns list of users", nickname = "getUsers", notes = "", response = User.class, responseContainer = "List", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "users", })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Succesful request.", response = User.class, responseContainer = "List"),
            @ApiResponse(code = 401, message = "Authorization information is missing or invalid."),
            @ApiResponse(code = 404, message = "An account with the specified IBAN was not found."),
            @ApiResponse(code = 500, message = "Unexpected error.") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> getUsers(@ApiParam(value = "") @Valid @RequestParam(value = "firstname", required = false) String firstname
, @ApiParam(value = "") @Valid @RequestParam(value = "lastname", required = false) String lastname
, @ApiParam(value = "", allowableValues = "Customer, Employee, Admin") @Valid @RequestParam(value = "RankOfUser", required = false) String rankOfUser
, @ApiParam(value = "", allowableValues = "Active, Blocked") @Valid @RequestParam(value = "StatusOfUser", required = false) String statusOfUser
);


    @ApiOperation(value = "Updated user", nickname = "updateUser", notes = "Updates the current logged in user.", response = User.class, responseContainer = "List", authorizations = {
            @Authorization(value = "ApiKeyAuth")    }, tags={ "users", })
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Successful user update", response = User.class, responseContainer = "List"),
            @ApiResponse(code = 400, message = "Invalid user supplied"),
            @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/users/{userId}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<User> updateUser(@ApiParam(value = "Updated user object" ,required=true )  @Valid @RequestBody User body
            ,@ApiParam(value = "userId that need to be updated",required=true) @PathVariable("userId") String userId
    );

}
