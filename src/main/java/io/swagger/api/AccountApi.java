/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Account;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-06-02T09:24:14.507Z[GMT]")
@Api(value = "account", description = "the account API")
public interface AccountApi {

    @ApiOperation(value = "Delete the account for the user", nickname = "accountIdDelete", notes = "", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Succesful deldeted account"),
        @ApiResponse(code = 401, message = "unauthorized"),
        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(value = "/account/{Id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> accountIdDelete(@ApiParam(value = "the user",required=true) @PathVariable("Id") Long id
,@ApiParam(value = "the Account you want to delete",required=true) @PathVariable("IBAN") Account IBAN
);


    @ApiOperation(value = "Get Accounts by user id", nickname = "accountIdGet", notes = "", response = Account.class, tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "list of accounts", response = Account.class),
        @ApiResponse(code = 400, message = "Invalid username supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/account/{Id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Account> accountIdGet(@ApiParam(value = "The id that needs to be fetched. Use user1 for testing.",required=true) @PathVariable("Id") List<Account> id
);


    @ApiOperation(value = "Add new account for user", nickname = "addAccount", notes = "", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created account for user"),
        @ApiResponse(code = 401, message = "unauthorized"),
        @ApiResponse(code = 404, message = "User not found.") })
    @RequestMapping(value = "/account/{Id}",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addAccount(@ApiParam(value = "the user",required=true) @PathVariable("Id") String id
,@ApiParam(value = ""  )  @Valid @RequestBody Account body
);

}
